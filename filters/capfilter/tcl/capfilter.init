#
# $Id$
#

set capfilter(hostport) "[info hostname]:8015";
#
set capfilter(conf)	[file join $common(confdir) "capfilter.conf"];
set capfilter(rc)	[file join $common(confdir) "capfilter.rc"];
set capfilter(prerc)    "";
set capfilter(postrc)   "";
set capfilter(rcbin)    "nbspcapfeed";
set capfilter(localconfdirs) $common(localconfdirs);
set capfilter(rcdir)	[file join $common(rcdir) "cap"];
set capfilter(datadir)  [file join $common(datadir) "cap"];
#
set capfilter(def) [file join $common(confdir) "capfilter.def"];
#
set capfilter(fileppathfmt) {files/$rc(awips2)/$rc(cap,key,identifier).xml};
#
set capfilter(invppathfmt) {inv/$rc(cap,key,expires,date).log};
set capfilter(invdir) "inv";   # Needed by nbspcapcleanup
#
# catalog paths and templates
#
set capfilter(catppath,global) {cat/global.xml};
set capfilter(catppathfmt,state) {cat/state/$rc(cap,state).xml};
set capfilter(catppathfmt,zone) {cat/zone/$rc(cap,state)/$rc(cap,zone).xml};
#
set capfilter(txmldirs) $capfilter(localconfdirs);
set capfilter(txmlsubdir) "cap";
set capfilter(atomtxml,global) "global.txml";
set capfilter(atomtxml,state) "state.txml";
set capfilter(atomtxml,zone) "zone.txml";
#
set capfilter(capkeylist) [list identifier event effective \
    expires status msgType \
    category urgency severity certainty areaDesc \
    headline instruction description];

# Overrides in the configuration file. 
if {[file exists $capfilter(conf)] == 1} {
    source $capfilter(conf);
}

#
# lib
#
proc caplib_get_key {key body} {

    set re "<${key}>";
    append re {(.+)};
    append re "</${key}>";

    set r "";
    if {[regexp $re $body match s]} {
	set r $s;
    }

    return $r;
}

proc caplib_get_zone {body} {

    set re {<valueName>UGC</valueName>\s+<value>(.+)</value>};

    set r "";
    if {[regexp $re $body match s]} {
	set r $s;
    }

    return [string tolower $r];
}

proc caplib_get_zone_list {body_list} {

    set zone_list [list];

    set content "";
    set stage "stop";
    foreach line $body_list {
	if {[regexp {<geocode>} $line]} {
	    set stage collect;
	    continue;
	} elseif {[regexp {</geocode>} $line]} {
	    set stage stop;
	    set zone [caplib_get_zone $content];
	    set content "";
	    if {$zone ne ""} {
		lappend zone_list $zone;
	    }
	} elseif {$stage eq "collect"} {
	    append content $line;
	}
    }

    return $zone_list
}

proc caplib_get_pil {body} {

    set re {<valueName>PIL</valueName>\s*?<value>(.+?)</value>}

    set r "";
    if {[regexp $re $body match s]} {
	set r $s;
    }

    return [string tolower $r];
}
