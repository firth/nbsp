#
# $Id$
#

set capfilter(hostport) "[info hostname]:8015";
#
set capfilter(conf)	[file join $common(confdir) "capfilter.conf"];
set capfilter(rc)	[file join $common(confdir) "capfilter.rc"];
set capfilter(prerc)    "";
set capfilter(postrc)   "";
set capfilter(localconfdirs) $common(localconfdirs);
set capfilter(rcdir)	[file join $common(rcdir) "cap"];
set capfilter(datadir)  [file join $common(datadir) "cap"];
set capfilter(catalogbin) "nbspcapcatalog";
set capfilter(cleanupbin) "nbspcapcleanup";
set capfilter(buildbin)   "nbspcapbuild";
set capfilter(feedbin)    "nbspcapfeed";
set capfilter(catalog_enable) 1;
set capfilter(feed_enable) 0;
#
set capfilter(def) [file join $common(confdir) "capfilter.def"];
#
set capfilter(fileppathfmt) \
    {files/$rc(cap,key,awips2)/$rc(cap,key,identifier).xml};
#
set capfilter(invppathfmt) {inv/$rc(cap,key,expires,date_gmt).log};
set capfilter(invdir) "inv";   # Needed by nbspcapcleanup
#
# catalog paths and templates
#
set capfilter(catppath,global) {cat/global.xml};
set capfilter(catppathfmt,state) {cat/state/$rc(cap,state).xml};
set capfilter(catppathfmt,zone) {cat/zone/$rc(cap,state)/$rc(cap,zone).xml};
set capfilter(catbodyfext) ".bxml";
set capfilter(catdir) "cat";   # Needed by nbspcapbuild
#
set capfilter(txmldirs) $capfilter(localconfdirs);
set capfilter(txmlsubdir) "cap";
set capfilter(atomtxml,global) "global.txml";
set capfilter(atomtxml,state) "state.txml";
set capfilter(atomtxml,zone) "zone.txml";
#
set capfilter(capkeylist) [list identifier event effective \
    expires status msgType \
    category urgency severity certainty areaDesc \
    headline instruction description];

# Overrides in the configuration file. 
if {[file exists $capfilter(conf)] == 1} {
    source $capfilter(conf);
}

#
# lib
#
proc caplib_get_key {key body} {

    set re "<${key}>";
    append re {(.+)};
    append re "</${key}>";

    set r "";
    if {[regexp $re $body match s]} {
	set r $s;
    }

    return $r;
}

proc caplib_get_zone {body} {

    set re {<valueName>UGC</valueName>\s+<value>(.+)</value>};

    set r "";
    if {[regexp $re $body match s]} {
	set r $s;
    }

    return [string tolower $r];
}

proc caplib_get_zone_list {body_list} {

    set zone_list [list];

    set content "";
    set stage "stop";
    foreach line $body_list {
	if {[regexp {<geocode>} $line]} {
	    set stage collect;
	    continue;
	} elseif {[regexp {</geocode>} $line]} {
	    set stage stop;
	    set zone [caplib_get_zone $content];
	    set content "";
	    if {$zone ne ""} {
		lappend zone_list $zone;
	    }
	} elseif {$stage eq "collect"} {
	    append content $line;
	}
    }

    return $zone_list
}

proc caplib_get_pil {body} {

    set re {<valueName>PIL</valueName>\s*?<value>(.+?)</value>}

    set r "";
    if {[regexp $re $body match s]} {
	set r $s;
    }

    return [string tolower $r];
}

proc caplib_get_rcvars {rc_name prod_body} {

    upvar $rc_name rc;
    global capfilter;

    # Some functions work on the entire body and some must work
    # line by line
    set prod_body_list [split $prod_body "\n"];

    set rc(cap,prod_body) $prod_body;
    set rc(cap,prod_body_list) $prod_body_list;

    set rc(cap,key,pil) [caplib_get_pil $prod_body];
    set rc(cap,key,awips) [string range $rc(cap,key,pil) 3 end];
    set rc(cap,key,awips1) [string range $rc(cap,key,awips) 0 2];
    set rc(cap,key,awips2) [string range $rc(cap,key,awips) 3 end];

    # Get the city/state from capfilter(site,<awips2>) 
    set status [catch {
    	foreach {city state} \
		[split $capfilter(site,$rc(cap,key,awips2)) ","] {};
    } errmsg];
    if {$status != 0} {
        # capfilter(site,<awips2>) is not defined for this awips2.
        set city "xxxx";
	set state "xx";
    }
    set rc(cap,city) $city;
    set rc(cap,state) $state;

    foreach key $capfilter(capkeylist) {
	set r [caplib_get_key $key $prod_body];
	set rc(cap,key,$key) $r;
    }

    set rc(cap,zones) [caplib_get_zone_list $prod_body_list];    # a tcl list

    # From the expires date-time extract the gmt date and time.
    # The expires value is a string of the form "2014-04-20T12:00:00-04:00".
    # The corresponding format for the tcl "clock scan" function is:
    set _fmt "%Y-%m-%dT%H:%M:%S%z";
    set expires_seconds [clock scan $rc(cap,key,expires) -format $_fmt];
    set expires_date_gmt \
	[clock format $expires_seconds -format "%Y-%m-%d" -gmt 1];
    set expires_time_gmt \
    	[clock format $expires_seconds -format "%H:%M" -gmt 1];
    set rc(cap,key,expires,date_gmt) $expires_date_gmt;
    set rc(cap,key,expires,time_gmt) $expires_time_gmt;

    # The partial and full path of the file.
    # They are defined by the local configuration (not extracted from
    # the original file), and they are included in the catalog as
    # pointers to the original file.
    set rc(cap,fileppath) [subst $capfilter(fileppathfmt)];
    set rc(cap,filefpath) [file join $capfilter(datadir) $rc(cap,fileppath)];
}
