#
# $Id$
#
# tcl script for setting the env variables for some of the filters that
# use some of the gempak tools. This is taken from the Gemenviron file(s).
# This file should be sourced after filters.conf, so that the gempak()
# variables are set. For the benefit of scripts that run outside the filters
# (e.g., tclgempak library) the check is made here and filters.conf is loaded
# if needed.
if {![info exists source_filters_conf_defined]} {
    source "/usr/local/etc/nbsp/filters.conf";
}

set env(NAWIPS)         $gempak(homedir)
set env(OS_BIN)		$gempak(bindir)
set env(GEMEXE)         $gempak(bindir)
set env(SCRIPTS_EXE)    $gempak(homedir)/bin
set env(PATH)           $env(PATH):$env(GEMEXE):$env(SCRIPTS_EXE)
#
# These are not actually used
#
set env(OS_LIB)		$gempak(libdir)
set env(GEMLIB)		$gempak(libdir)

# The next set of variables are independent of GEMDATA (the GEMDATA dependent
# variables are defined further below) and they should be set according to
# the gempak installation. Standard gempak installations should not need
# modifications in this block of variables.
set env(GEMPAK)		$env(NAWIPS)/gempak
set env(GEMPAKHOME)	$env(NAWIPS)/gempak
set env(GARPHOME)	$env(NAWIPS)/comet/garp
set env(GARP_PATH)	$env(GARPHOME)/config
set env(CONFIGDIR)	$env(NAWIPS)/config
set env(GEMPDF)		$env(GEMPAK)/pdf
set env(GEMTBL)		$env(GEMPAK)/tables
set env(GEMERR)		$env(GEMPAK)/error
set env(GEMHLP)		$env(GEMPAK)/help
set env(GEMMAPS)	$env(GEMPAK)/maps
set env(GEMNTS)		$env(GEMPAK)/nts
set env(GEMPARM)	$env(GEMPAK)/parm
set env(GEMPTXT)	$env(GEMPAK)/txt/programs
set env(GEMGTXT)	$env(GEMPAK)/txt/gemlib
set env(NMAP_RESTORE)	$env(GEMNTS)/nmap/restore
set env(MEL_BUFR)	$env(GEMPAK)/source/melbufr
set env(MEL_BUFR_TABLES) $env(GEMPAK)/tables/melbufr

# These variables depend on GEMDATA. They are not used by the radmap
# and satmap tools (the tools pass eplicitly the data file to gpmap).
# But a script that calls gpmap assuming that gpmap knows where to find the
# appropriate data file will need these variables defined.

# This should be set consistently with gpfilter.conf
set env(GEMDATA)	"/var/noaaport/data/gempak"

# Standard installations do not need modifications below.
set env(OBS)	$env(GEMDATA)
set env(NTRANS_META)	$env(GEMDATA)/meta
set env(TEXT_DATA)	$env(GEMDATA)/nwx
set env(AFOS_ALARMS)	$env(GEMDATA)/alarms
set env(SAT)	$env(GEMDATA)/images/sat
set env(RAD)	$env(GEMDATA)/nexrad
set env(GOES8)	$env(SAT)/GOES-8
set env(GOES9)	$env(SAT)/GOES-9
set env(MODEL)	$env(GEMDATA)/model
set env(HDS)	$env(MODEL)
set env(MODEL_SND)	$env(GEMDATA)/modsnd/gempak/bufr/model
set env(MODEL_SFC)	$env(GEMDATA)/modsnd/gempak/bufr/model
set env(SAO)	$env(GEMDATA)/surface
set env(UPA)	$env(GEMDATA)/upperair
set env(NLDN)	$env(GEMDATA)/nldn
set env(TORN_WARN)	$env(TEXT_DATA)/watch_warn/TOR
set env(TSTRM_WARN)	$env(TEXT_DATA)/watch_warn/SVR
set env(TEXT_WARN)	$env(TEXT_DATA)/watch_warn
set env(RBKGPH)	$env(GEMDATA)/redbook
set env(SPDATA)	$env(GEMDATA)
set env(GRPHGD)	$env(GEMPAK)

#
# Read the local overrides
#
if {[info exists source_gempak_env_defined]} {
    return;
}
set source_gempak_env_defined 1;

set _confname "gempak.env";
foreach _d $common(localconfdirs) {
    set _localconfname ${_d}/${_confname}
    if {[file exists ${_localconfname}] == 1} {
        source ${_localconfname};
    }
}
unset -nocomplain _d;
unset -nocomplain _localconfname;
unset _confname;
